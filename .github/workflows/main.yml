name: TranscriptLog

on:
  push:
    branches:
      - main

jobs:
  run-powershell-script:
    runs-on: windows-latest
    steps:
    - name: Azure PowerShell Action
      uses: Azure/powershell@v1
      with:
        inlineScript: |
          Write-Host "Release Name: ${{ github.event.release.name }}, jobname: $env:GITHUB_JOB and RunId: $env:GITHUB_RUN_ID, Attemps: $env:GITHUB_RUN_ATTEMPT"         
          $LogFileName = "${{ vars.CustomerId }}" + "_" + "${{ github.workflow }}" + "_" +  $env:GITHUB_RUN_NUMBER + "_" + $env:GITHUB_RUN_ATTEMPT
          # Set Log File Name as GitHub Environment variable
          echo "LogFileName=$LogFileName" >> $Env:GITHUB_ENV 
          $folderPath = "$Home\" + "Logs"
          New-Item -ItemType Directory -Path $folderPath
          # Set Log File Folder Path as GitHub Environment variable
          echo "LogFolderPath=$folderPath" >> $Env:GITHUB_ENV 
          $LogFilepath = $folderPath + "\" + $LogFileName + ".txt"
          # Set Log File Path as GitHub Environment variable
          echo "LogFilepath=$LogFilepath" >> $Env:GITHUB_ENV 
          # echo "LogFolderPath=$folderPath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append      
          Start-Transcript -Path $LogFilepath -Append -IncludeInvocationHeader -NoClobber
          Write-Host "test the transcript logic."
          # Stop-Transcript
        azPSVersion: "latest"
    - name : Azure PowerShell Action
      uses: Azure/powershell@v1
      with:
        inlineScript: |
          Start-Transcript -Path ${{env.LogFilepath}} -Append -IncludeInvocationHeader -NoClobber
          function logtest {
          param (
          [Parameter(Mandatory = $True)]
          [ValidateNotNullOrEmpty()]
          [string]$CustomerName
          )
          Write-Host "CustomerName: $($CustomerName)"
          }
          # Calling function
          logtest -CustomerName ${{ vars.CustomerId }}
        azPSVersion: "latest"    
    #- name: Upload test results
      #if: always()
      #uses: actions/upload-artifact@v2
      #with:
        #name: ${{env.LogFileName}}
        #path: ${{env.LogFolderPath}}        
    outputs: 
      FilePath: ${{env.LogFilePath}}   
      LogFileName: ${{env.LogFileName}}
      LogFolderPath: ${{env.LogFolderPath}}
  Test-powershell-script:
    runs-on: windows-latest
    needs: run-powershell-script
    steps:
    - name: Azure PowerShell Action
      uses: Azure/powershell@v1
      with:
        inlineScript: |
          Start-Transcript -Path ${{ needs.run-powershell-script.outputs.FilePath}} -Append -IncludeInvocationHeader -NoClobber
          Write-Host "Job2"
        azPSVersion: "latest"  
  Upload-Artifact:   
    runs-on: windows-latest
    needs: [run-powershell-script, Test-powershell-script]
    steps:
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ${{needs.run-powershell-script.outputs.LogFileName}}
        path: ${{needs.run-powershell-script.outputs.LogFolderPath}}
